=====================================
1) tools > avd manager
2) create virtual device
3) Device 선택(Nexus 5X) > clone device
4) 상세설정 변경
5) OS 선택(DOWUNLOAD)


=====================================
1. 설치시 주의 사항
   1). 폴더명은 전부 영문, 이름사이에 공백이 없어야 함.
   2) 프로젝트 생성시 에러 발생 하면, 
       File> synk with gladle

2. 안드로이드 특징
  1) 안드로이드는 리눅스 기반
  2) 안드로이드는 자바 언어로 개발
  3) VMdms ART(Android Runtime)
  4) ART는 앱을 실행할때 DEX 파일을 실행

3. 컴포넌트 기반 개발
   - 사용자가 객체를 만드는것이 아니라, 컨테이너가 만든 객체

  1) 컴포넌트는 앱의 구성단위, 여러개를 조합해서 하나의 앱을 만듬.
  2) 컴포넌트는 앱 내에서 독립적인 실행 단위입니다.
  3) 인텐트(Intent)라는 것을 매개로 하여 컴포넌트 간의 상호 호출
  4) main 같은 진입 지점이 따로 없음.

4. 안드로이드 컴포넌트 종류
   1) Activity	 : UI를 구성하기 위한 컴포넌트
   2) Service	 : UI없이 백그라운드에서 장시간 수행되는 컴포넌트
   3) ContentProvider : 애플리케이션 간 데이터를 공유하기 위한 컴포넌트
   4) BroadcastReceiver : 이벤트 모델로 수행되는 컴포넌트

5. 리소스를 이용한 개발
   

6. 디렉터리 구조

====== View =========

1. View : 안드로이드 뷰클래스의 최상위 클래스
2. View Group : 다른뷰 여러개를 뷰그룹 포함해서 한꺼 번에 제어하기 위한 목적
  

View 속성

1. id 속성
   뷰의 식별자
   지정한 id값은 R.java 파일에 등록
   XML에 등록한 ID값을 매개변수로 하여 findeViewById()함수로 등록

2. LayOut_width, Layout_height
    뷰의 크기를 지정
     -- wrap-content : contents의 크기 만큼 차지
     -- match_parent : 부모의 크기 만큼 차지
     -- 20dp 등 직접 수치 입력

3. Background
    -- 배경색상

4. padding
   -- 위젯의 경계선으로부터 컨텐츠 간의 간격

5. layout_margin
    -- 뷰와 뷰 사이의 간격

6. visibility
    -- visible     : 보임			0
    -- invisible  :  안보임, 자리를 차지함		4
    -- gone      :  안보임, 자리를 차지 하지 않음	8

======= 기본 위젯 =============

1. textView
   - android:maxLines="3"  : 긴 문자을 최대 3줄까지 출력
   - android:ellipsize ="end": 말줄임(...)
   - android:autoLink="web|email|phone": 문자열 내에서 autolink에 해당 URL문자열일 자동 링크 형태로 출력 
   - android:textColor=""    : 색지정
   - android:textSize=""      : 크기지정
   - android:textStyle=""     : bold, italic 지정
   - android:typeFace=""     : 폰트 지정	

2. ImageView
   - iu1.jpg 이미지파일을  res>drawable 저장
   - android: src="@drawable/iu1"
   - android: maxWidth="" : 화면에 출력할 최대 넓이 지정
   - android: maxHeight="" : 화면에 출력할 최대 높이 지정
   - android: adjustViewBounds="true" : 이미지의 가로세로의 비율 유지 여부
   - android: tint="" : 이미지위에 다른 색상을 입힐 때 사용

 

3. EditText
   android:Lines="3" : 처음 화면에 보일때 특정 줄 만큼 보일 때 사용
   android:maxLines="3" : 처음 화면에는 한줄로 입력시 라인이 3줄까지 늘어남 
   android:inputType=""  : phone, numer,textEmailAdreess 등

   -- input type
       none :  모든 문자 입력 가능. 줄 바꿈 가능
       text   :  none과 동일, 단, 줄 바꿈 불가능
       textMultiLine  : 여러줄 입력 가능
       textUri           : URL 입력 모드
       textCapCharacters : 키보드가 자동 대문자 입력 모드
       textCapWords       : 각 단어의 첫글자 입력시 키보드가 자동 대문자 입력 모드
       textCapSentences  : 각 문장의 첫글자 입력시 키보드가 자동 대문자 입력 모드
       textNoSuggestions : 단어 입력시 키보드의 추천 단어 보여주기 비 활성화
       textEmailAddress    : 이메일 입력모드
       textPassword         : 비밀번호 입력모드, 문자가 . 으로 표시
       textVisiblePassword : 비밀번호 입력, 문자열 표시
       number	: 숫자 입력
       numberSigned : 숫자 , - 입력 가능
       numberDecimal : 소숫점입력 가능			
       numberPassword : 숫자 키만 입력,  .  표시
       phone	: 전화번호 입력
       datetime	: 날짜 시간 입력 /. : 키제공
       date		: 날짜 / 제공
       time		: 시간 : 제공

4. Button	

5. checkBox
   isChecked()  :  해당 checkBox가 체크된 상태인지를 반환
   setChecked() : 체크 상태를 바꾸는 함수
   toggle()	       : 체크 상태를 반대로 변경

6.RadioButton 
  부모로 RadioGroup을 선언
  check()			: 해당 RadioButton을 체크
  clearCheck()		: 체크 상태를 해제
  getCheckedRadioButtonId()	: 체크된 RadioButton의 ID 값


=============  LayOut  P.200 ===============
- 대표적인 속성
  1) orientation	:  방향 지정, vertical(세로), horizontal(가로)
  2) gravity	:  레이아웃내의 위젯들의 위치 선정
  3) layout_gravity	:  위젯내의 컨텐츠의 위치 선정
  3) padding	:  레이아웃내의 위젯의 여백
  4) baseLineAligned	:  레이아웃 위젯의 정렬   	 	

1. Linear LayOut
   - 뷰의 순서대로 가로나 세로 방향으로 나열,
   - orientation 속성을 제공
   - gravity
      -- top		: 대상 객체를 위쪽 끝에 배치
      -- bottom		: 대상 객체를 아래 끝에 배치 
      -- left			: 대상 객체를 왼쪽 끝에 배치
      -- right		: 대상 객체를 오른쪽 끝에 배치
      -- center		: 대상 객체를 수직, 수평방향의 중앙에 배치
      -- center_vertical	: 대상 객체를 수직 방향의 중앙
      -- center_horizontal	: 대상 객체를 수평 방향의 중앙
      -- fill_vertical		: 대상 객체를 수직 방향의 여유 공간 만큼 확대하여 채우기
      -- fill_horizontal		: 대상 객체를 수평 방향의 여유 공간 만큼 확대하여 채우기
      -- fill			: 대상 객체를 수직, 수평 방향의 여유 공간 만큼 확대하여 채우기
      -- clip_vertical		: 대상 객체의 상하 길이가 여유공간보다 클 경우 남는 부분을 잘라내기
          			: top|clip_vertical  - 아래쪽에 남는 부분을 잘라내기
			: buttom|clip_vertical - 위쪽에 남는 부분을 잘라내기
   			: center|clip_vertical   - 위, 아래 남는 부분을 잘라내기
       -- clip_horizontal	: 대상 객체의 좌우 길이가 여유공간보다 클 경우 남는 부분을 잘라내기
          			: right|clip_vertical  - 왼쪽에 남는 부분을 잘라내기
			: left|clip_vertical - 오른쪽에 남는 부분을 잘라내기
   			: center|clip_vertical   - 좌, 우 남는 부분을 잘라내기

2. Relative LayOut
    1) 부모 컨테이너와의 상대적 위치를 이용
       -- layout_alignParentXXX
       - layout_alignParentTop		: 부모의 윗부분에 위치
       - layout_alignParentBottom	: 부모의 아랫부분에 위치		
       - layout_alignParentLeft		: 부모의 왼쪽부분에 위치
       - layout_alignParentRight		: 부모의 오른쪽부분에 위치
       - layout_centerHorizontal	: 부모의 가로 방향 중앙에 위치
       - layout_centerVertical	: 부모의 세로 방향 중앙에 위치
       - layout_centerInParent	: 부모의 가로, 세로 방향 중앙에 위치

     2) 다른 뷰와 상대적 위치
       - layout_above		: 지정한 뷰의 위쪽에 위치
       - layout_below		: 지정한 뷰의 아래쪽에 위치
       - layout_toLeftOf	: 지정한 뷰의 왼쪽에 위치
       - layout_toRightOf	: 지정한 뷰의 오른쪽에 위치
       - layout_alignTop	: 지정한 뷰와 윗부분을 정렬
       - layout_alignBottom	: 지정한 뷰와 아랫부분을 정렬
       - layout_alignLeft	: 지정한 뷰와 왼쪽을 정렬
       - layout_alignRight	: 지정한 뷰와 왼쪽을 정렬
       - layout_alignBaseLine	: 지정한 뷰와 텍스트 기준선을 정렬


3. Table LayOut

4. Grid LayOut

5. Frame LayOut

6. Constraint LayOut


================= Event ===================

1. click 

 1) 
   button.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                Toast.makeText(getApplicationContext(), "test", Toast.LENGTH_SHORT).show();
            }
        });

  2) public class Main2Activity extends AppCompatActivity implements View.OnClickListener {

	@Override
    	public void onClick(View v) {

    	    /*if(v==button2){
    	        Toast.makeText(getApplicationContext(), "2", Toast.LENGTH_SHORT).show();
    	    }else if(v==button3){
     	       Toast.makeText(getApplicationContext(), "3", Toast.LENGTH_SHORT).show();
    	    }else if(v==button4){
    	        Toast.makeText(getApplicationContext(), "4", Toast.LENGTH_SHORT).show();
    	    }else {
     	       Toast.makeText(getApplicationContext(), "5", Toast.LENGTH_SHORT).show();
     	   }*/

      	  switch (v.getId()){
         	   case R.id.button2:

          	      break;

        	    case R.id.button3:

           	     break;
      	      case R.id.button4:

        	        break;
        }


    }

 3) 리스너 인터페이스를 구현 하는 클래스를 내부 클래스로 선언해서 쓰는 방법
    

  

주요 이벤트

  1) OnClickListener		: 뷰 클릭시 발생하는 이벤트
  2) OnLongClickListener	: 뷰을 오래 클릭했을때 발생하는 이벤트
  3) OnCheckedChangeListener	: checkbox의 상태 변경 이벤트
  4) OnItemClickListener	: ListView의 항목 선택 이벤트
  5) OnDateSetListener	: DatePicker의 날짜 선택 이벤트
  6) OnTimeSetListener	: TimePicker의 시간 선택 이벤트


2. Touch
   ACTION_DOWN		:  화면에 터치된 순간의 이벤트
   ACTION_UP		:  터치를 떼는 순간의 이벤트
   ACTION_MOVE		:  터치한 후 이동하는 순간의 이벤트

   이벤트 메서드
   onDown()		: 화면이 눌렸을 경우
   onShowPress()		: 화면이 눌렸다 떼어지는 경우
   onSingleTapUp()		: 화면이 한 손가락으로 눌렀다 떼어지는 경우
   onSingleTapConfirmed	: 화면이 한 손가락으로 눌려지는 경우
   onDoubleTap()		: 화면이 두 손가락으로 눌려지는 경우
   onDoubleTapEvent	: 화면이 두 손가락으로 눌려진 상태에서 떼거나 이동하는 등 세부적인 액션
   onScroll()		: 화면이 눌린채 일정한 속도와 방향으로 움직였다 떼는 경우
   onFling()		: 화면이 눌린채 가속도를 붙여 손가락을 움직였다 떼는 경우
   onLongPress()		: 화면을 손가락으로 오랜 누르는 경우

3. KeyEvent

   onKeyDown()		: 키가 눌린 순간의 이벤트
   onKeyUp()		: 키를 떼는 순간의 이벤트
   onKeyLongPress()		: 키를 오래 누르는 순간의 이벤트

   Key값

   KEYCODE_DPAD_LEFT	: 왼쪽 화살표
   KEYCODE_DPAD_RIGHT	: 오른쪽 화살표 		
   KEYCODE_DPAD_UP	: 위쪽 화살표
   KEYCODE_DPAD_DOWN	: 아래쪽 화살표
   KEYCODE_DPAD_CENTER	: 중앙 버튼
   KEYCODE_CALL		: 통화 버튼
   KEYCODE_END_CALL	: 통화 종료 버튼
   KEYCODE_HOME		: 홈버튼
   KEYCODE_BACK		: 뒤로 가기 버튼
   KEYCODE_VOLUME_UP	: 음량 증가 버튼
   KEYCODE_VOLUME_DOWN	: 음량 증가 버튼
   KEYCODE_0 ... 9		: 숫자 0 부터 9
   KEYCODE_A ... Z		: 알파벳 A부터 Z 


=================== Intent ====================
어플 끼리의 통신

MainActivy에서  SubActivity 호출


  1) 단순 이동
	- MainActivity
  	Intent intent = new Intent(Context, 호출할 compornent);
	Intent intent = new Intent(this, SubActivity.class);
	startActivity(intent);

  2) 이동 데이터 추가
      - MainActivity
  	Intent intent = new Intent(this, SubActivity.class);
	intent.putExtra("키", "밸류");
	intent.putExtra("name", "iu");
	intent.putExtra("age", 24);
	startActivity(intent);
    
      - SubActivity
	intent = getIntent();
	if(intent != null){
	   String name = intent.getStringExtra("name");
	   int age = intent.getIntExtra("age", 0);		
	}


    3) 이동시 데이터가 객체 타입
	public class MemberDTO implents Serializable {
	    private Strint name;
	    private int age;
	    ...
	    getter, setter	
	}

      - MainActivity
  	Intent intent = new Intent(this, SubActivity.class);
	MemberDTO memberDTO = new MemberDTO();
	-- 멤버 변수 설정
	intent.putExtra("member", memberDTO);
	startActivity(intent);
    
      - SubActivity
	intent = getIntent();
	if(intent != null){
	   MemberDTO memberDTO = (MemberDTO)intent.getSerializableExtra("member");
	}


     4) Parcelable

	public class MemberDTO implements Parcelable {

    		private String name;
   		private int age;

   		public MemberDTO(){}

    		public MemberDTO(String name, int age){
       		 this.name=name;
       		 this.age = age;
  		  }


  	 	 public String getName() {
  		      return name;
   		 }

   		 public void setName(String name) {
    		    this.name = name;
   		 }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    protected MemberDTO (Parcel in){
        this.name = in.readString();
        this.age = in.readInt();
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(this.name);
        dest.writeInt(this.age);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public static final Creator<MemberDTO> CREATOR = new Creator<MemberDTO>() {
        @Override
        public MemberDTO createFromParcel(Parcel source) {
            return new MemberDTO(source);
        }

        @Override
        public MemberDTO[] newArray(int size) {
            return new MemberDTO[size];
        }
    };
}

     - MainActivity
	MemberDTO memberDTO = new MemberDTO();
	-- 멤버 변수 설정
	intent.putExtra("member", memberDTO);
	startActivity(intent);

     - SubActivity
          MemberDTO memberDTO = intent.getParcelableExtra("member");

            TextView textView = (TextView)findViewById(R.id.t2);
            textView.append("\n"+memberDTO.getName());
            textView.append("\n"+memberDTO.getAge());





2. 호출 한 곳으로 되돌아 가기	

    -- MainActivity
      Intent intent = new Intent(this, SubActivity.class);
      // intent.putExtra(....)

      startActivityForResult(intent, 100);

     @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        if(requestCode == 11 && resultCode==RESULT_OK){
            Toast.makeText(getApplicationContext(), "OK", Toast.LENGTH_SHORT).show();
        }

    }

   -- SubActivity
        Button button = (Button) findViewById(R.id.btn2);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                setResult(RESULT_OK, intent);
                finish();//activity 종료
            }
        });





 	















	





 	
