1.JDK		- 환경변수 설정
2.DB		- 환경설정
3.WebServer	- 환경변수
4.Eclips	- 환경설정

===========================================
HTTP: tcp


===================web.xml=================

배포서술자 (DD, Deployment Descriptor)

-웹어플리케이션의 기본적인 설정을 작성 파일.
-WEB-INF/web.xml
-정보
 서블릿의 정보
 서블릿 매핑
 서블릿 초기화
 필터 정보
 필터 매핑
 웹어플리케이션 정보
 세션정보
 리스너정보

-웹서버 최초로 구동시 배포서술자를 읽고 구동 시작
-web.xml에 오류가 있을 경우 웹서버가 실행되지 않음
-매핑의 url패턴의 주소는 절대경로로 작성


==================servlet=====================


CLient에서 Server로 데이터 전송

parameter
 이름(String)=값(String)


Servlet

1.파라미터
 -Client에서 Server로 데이터를 전송할 때

 String v = request.getParameter("파리미터 이름")
 :파라미터값

 String [] vs = request.getParameterValues("파라미터 이름")
 :하나의 파라미터 이름으로 여러개의 값이 올때
 
 Enumeration e = request.getParameterNames()
 :파라미터 이름의 집합

 Map<String, String[]> m = request.getParameterMap()
 :파라미터의 이름을 키, 파라미터 값을 value로 맵을 생성


2.Attribute
 -Server에서 Server로 데이터를 전송할 때
 이름(String) 값(Object)

==============================jsp==============================
Java Server Page

-HTML내에 자바코드를 삽입하여 웹 서버에서 동적으로 웹 페이지를 생성하여
 웹 브라우저에 돌려주는 언어

-jsp -> servlet으로 변환


1.스크립트 요소
 1)스크립틀릿	:<% 자바코드%>
 2)표현식	:<%= 데이터%>
 3)선언부


2.내장 객체

-사용자가 생성하는 것이 아니라, container 에서 생성되는 객체
-생명주기


 1)Request, Response

 -요청 발생 시 생성, 응답이 오면 소멸
  
  a)Servlet	:매개변수로 받아서 사용

  b)jsp		:참조변수 사용(request, response)


 2)Session, Cookie
  
  a)session	: 최초 접속 시 생성, 브라우저 종료시 또는 시간 만료 시 소멸






3.자바와 오라클 연동
 
 1)ojdbc6.jar WEB-INF/lib 폴더에 붙여넣기

 2)연동순서
  a)접속정보 4가지 서술
  b)드라이버를 메모리에 로딩
  c)Connection 맺기(로그인)
  d)sql문 생성
  e)sql문 미리 전송
  f)?값 세팅
  g)최종 전송 후 처리
  h)연결 해제



4.입력 form 에서 파라미터 이름
 -데이터베이스의 컬럼명과 일치
 -데이터베이스의 컬럼명과 DTO의 멤버변수명과도 일치




5.rownum 처리
 

 1	1	10
 2 	11 	20
 3 	21	30



6.페이징 처리

 1)글의 총 갯수

 2)페이지의 총 갯수

 3)총 블럭의 갯수

 4)curPage로 curBlock 구하기
 
 5)curBlock으로 startNum 과 lastNum 구하기

 6)curBlock이 마지막 block이라면 lastNum에 totalPage 대입

 perBlock: 한 블럭당 출력하는 번호의 갯수


  page의 수가 10	: 2
  page의 수가 11	: 3
  page의 수가 14	: 3
  page의 수가 15	: 3
  page의 수가 16	: 4




	c	s	l
	1	1	5
	2	6	10
	3	11	15

	lastNum = c*5
	startNum = (c-1)*5+1



//페이징
	//1. 전체 글의 갯수

	//2. 전체 페이지 갯수

	//3.전체 블럭의 갯수

	//4.curPage의 번호로 croBlock 구하기

	//5.curBlock 번호로 starkNum, lastNum 구하기




7.Foward, Redirect



======================== Action Tag ==============================

jsp에서 제공하는 특별한 태그
1)<jsp:include page="">	:모듈화	== <%@ page include=""%>
2)<jsp:param name="" value="">	:foward 또는 include 파라미터를 전달 할 때 사용
3)<jsp:forward page="">		:RequestDispather view = request.getRequestDispather()
4)<jsp:useBean>
 a) bean을 새로 생성		:new

 b) 만들어진 bean을 사용		:use

 c) scope :영역
  1)page	:현재 jsp 페이지 내

  2)request	:response 전까지

  3)session	:session 만료 전까지

  4)application	:서버 종료 전까지


========================== 자바빈 =================================

자바 클래스


========================== fileUpload =============================
1.cos.jar 다운

2.<form method ="post" enctype="multipart/form-data" >

3.MultipartRequest multi = new MultipartRequest
  (request, saveDirectory, maxPostSize, encoding, policy)

 1)request		:jsp의 내장 객채 request
 2)saveDirectory	:파일의 저장경로
 3)maxPostSize		:파일의 최대크기
 4)encoding		:인코딩 형식 지정
 5)policy		:중복 파일명 정책

   mumti.getFileSystemName("파라미터 이름"): 서버에 저장된 파일명 반환
   multi.getOriginalFileName("파라미터 이름"):클라이언트가 업로드 할 때의 파일명 반환

=============================================================================================


|  EL(Expression Language)란?
 한국어로는 '표현 언어'라고 할 수 있다. 표현 언어는 값을 스크립트로 사용하는 언어로  JSP의 문법을 보완하는 역할을 한다. JSP에는 Java코드도 들어가지만 프론트엔드요소 (html 등)의 비중이 굉장히 높다. 그런데 JSP는 프론트엔드, 디자이너가 다루기에는 이질감이든다.  따라서 JSP를 효율적으로 프론트엔드 개발과 백엔드 개발로 나눠 쓸 수 있는 방법에 대해 고민하다가 Java보다 간결하고 직관적인 형태로 등장한 것이 EL이다. 

- JSP의 스코프(scope)에 맞는 속성 사용할 수 있다. 물론 JSP에서 내장객체와 Java코드로 스코프에 맞는 속성을 사용할 수 있지만, EL을 사용하면 조금 더 쉽게 출력이 가능하다.
- 집합 객체(컬렉션, 프레임워크 등)에 대한 접근 방법이 쉽다.
- 수치 연산, 관계 연산, 논리 연산자 제공한다.
- 변수뿐만 아니라 자바 클래스 메소드 호출 기능 제공한다.
- 표현언어만의 기본 객체 제공한다.


${기본객체.속성명}

${requestScope.boadr}	== reuqest.getAttribute("board")

${board}		== page.getAttribute("board") 없으면
			   request.getAttribute("board") 없으면
			   session.getAttribute("board") 없으면
			   application.getAttribute("board")

page.setAttribute("test","page");
request.setAttribute("test","request");

${test}	->  page.getAttribute("test") 후 종료


${requestScope.test}

ArrayList<String> ar = new ArrayList<>();
ar.add("f1");
ar.add("f2");

request.setAttribute("list", ar);



Map <String, String> m = new HashMap<>();
m.put("f1", "n1");
m.put("f2", "n2");

request.setAttribute("m", m);

----jsp

	${list["1"]}	->f2
	${m["f2"]}	->n2

//절대경로
<%=request.getContextPath()%>

QNA
번호, 제목, 작성자, 내용, 날짜, 조회수, ref(그룹) step(그룹 내 순서) depth(들여쓰기 횟수)
num title writer contents reg_date hit


번호	제목	ref	step	depth
1	1	1	0	0
2	2	2	0	0
3	1_1	1	1+1	1
4	2_1	2	1	1
5	1_1_1	1	2+1	2
6	1_2	1	1	1


ref:그룹
 1)원본글:자기자신의 글번호
 2)답글  :부모글의 ref


step:그룹 내의 순서
 1)원본글:0
 2)답글  
   a.ref가 부모글의 ref와 같고,step이 부모의 step보다 큰 것들
     update step1 증가

   b.자기자신의 step에 부모의 ref+1한 값



depth:들여쓰기
 1)원본글:0
 2)답글  :부모글의 depth +1

원본글: insert into qna values(qna_seq.nextval, '','','',sysdate, 0, qna_currval, 0,0)
답글  : 
	1)부모글의 글번호로 부모글의 정보 조회
	
	2)update qna set step=step+1 where ref=부모글의 ref and step>부모글의 step
	
	3)insert into qna values(qna_seq.nextval, '','','',sysdate, 0,부모글 ref,부모글 step+1
	  ,부모글 depth+1)

select * from qna order by ref desc
번호	제목	ref	step	depth
2	2	2	0	0
4	2_1	2	1	1
5	1_1_1	1	2+1	2
6	1_2	1	1	1
1	1	1	0	0
3	1_1	1	1+1	1

select * from qna order by ref desc, step asc
번호	제목	ref	step	depth
2	2	2	0	0
4	2_1	2	1	1
1	1	1	0	0
6	1_2	1	1	1
3	1_1	1	1+1	1
5	1_1_1	1	2+1	2




번호	제목		날짜
2	2
4	  2_1
1	1
3	  1_1
5	    1_1_1



Search		: kind, search
RowNumber	: startRow, lastRow, Search
Pager		: totalPage, totalBlock, startNum, lastNum, Search

MakePage
  makeRow	: startRow, lastRow 계산
  makepage	: 페이징 계산

Daeki/jsp_3































